// Code generated by go-bindata. DO NOT EDIT.
// sources:
// database/sql/cte.sql
// database/sql/fill.sql
// database/sql/metadata_query.sql
// database/sql/multiple_join.sql
// database/sql/recreate.sql
// database/sql/scalar_function_call.sql
// database/sql/scalar_function_init.sql
// database/sql/scalar_query.sql
// database/sql/stored_procedure_call.sql
// database/sql/stored_procedure_init.sql
// database/sql/system_function.sql
// database/sql/table_function_call.sql
// database/sql/table_function_init.sql

package database


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDatabaseSqlCteSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xcf\x2c\xc9\x50\x70\x0e\x71\x55\xd0\xc8\x4c\xd1\x51\x28\xcf\x2f\x4a\x29\x8e\x4f\xce\x2f\xcd\x2b\xd1\x54\x70\x0c\x56\xd0\xe0\x52\x50\x50\x50\x28\x4e\xcd\x49\x4d\x2e\x51\x40\x53\x00\x96\x4a\x2b\xca\xcf\x55\x28\x28\x4d\xca\xc9\x4c\xd6\xcb\xcd\x4f\x49\xcd\x29\x06\x0b\x97\x67\xa4\x16\xa5\x2a\x24\xe7\x24\x16\x17\x2b\xd8\x2a\xa8\x18\x72\x69\x72\x41\x0d\x71\x0c\x73\xd7\x40\xb6\x85\x0b\x6c\x82\x73\x88\xab\x35\x17\x20\x00\x00\xff\xff\x9e\xaf\xd4\xef\x8b\x00\x00\x00")

func bindataDatabaseSqlCteSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatabaseSqlCteSql,
		"database/sql/cte.sql",
	)
}



func bindataDatabaseSqlCteSql() (*asset, error) {
	bytes, err := bindataDatabaseSqlCteSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "database/sql/cte.sql",
		size: 139,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1667640669, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatabaseSqlFillSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xd5\xef\x8e\x82\x30\x0c\x00\xf0\xef\x3c\xc5\xbe\xc1\x5d\x50\x1e\xc0\x87\x59\xe6\x56\x75\xc9\x58\x97\xb6\xdc\x9f\xb7\xbf\x08\x72\x41\xc4\xe8\x88\x7e\x33\x95\xb5\x3f\x4a\x0b\x16\xd3\xaf\x4a\xdd\x3e\x78\xbb\xed\x18\x88\xab\x68\x5a\xa8\x15\xc1\xd1\xb3\x90\x11\x8f\x51\x3b\x23\x50\xab\x83\x27\x16\x6d\x9c\xf3\x93\x60\x30\xb7\x31\x01\x6a\x59\x5b\xec\xa2\x7c\xa8\x03\x61\xab\xca\xe6\x84\x2d\x34\x6e\x1f\xcc\x9e\x9b\x23\x44\x20\x23\x48\x8d\x33\x62\x9a\xbe\xec\xd6\xf2\x57\xa9\x1c\x04\xdf\x7a\x01\x52\x65\x5d\xee\x8a\xcd\x46\x31\x04\xb0\xa2\x3e\x87\x3c\x53\xe8\xae\x28\xa6\xf8\x16\x1d\x04\xae\x6c\x30\xcc\xb5\xfa\x46\x72\x17\xc2\xe2\xbd\x08\xfc\x3c\x65\x1b\xb2\x66\xe1\x86\x23\x33\xdd\xd0\x12\xea\xaa\xfe\x5f\xed\x5d\xad\x5e\x2c\x1d\x2b\x64\x59\xc7\x43\x8b\x5a\x88\xef\xd6\x42\x5c\xa1\x85\x38\xd3\x5a\x8c\xe7\xb2\x5c\x4d\xe6\xee\x75\xd2\x31\x7b\x96\x74\x3c\x34\x93\x26\x43\xc2\x1a\x0f\x9a\x13\x80\x3d\xdd\x5b\xb5\x67\x58\x09\xf3\x44\xb3\xd2\x33\x58\xbf\x50\xda\x44\xa7\xff\x07\xf5\x1c\xea\x9f\xfc\x39\xd2\xff\x58\xe5\x1c\x32\xaf\x1a\xce\x5b\xd4\x03\x35\xc4\x77\xa8\x33\x87\xf4\x16\x75\x67\x5c\xaf\xdb\x7d\x89\x4e\xed\x39\xd3\xb9\xae\xc3\x8b\x94\xc7\x5c\x88\x2f\xe2\x66\xb6\x76\x91\xb2\xf8\x19\xe8\xaf\x48\xc8\x93\x17\x58\x42\x7e\x12\x79\x49\x91\xbb\x61\xd7\x95\x77\xc5\x5f\x00\x00\x00\xff\xff\x90\x8f\xbd\x18\x5a\x07\x00\x00")

func bindataDatabaseSqlFillSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatabaseSqlFillSql,
		"database/sql/fill.sql",
	)
}



func bindataDatabaseSqlFillSql() (*asset, error) {
	bytes, err := bindataDatabaseSqlFillSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "database/sql/fill.sql",
		size: 1882,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1668598016, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatabaseSqlMetadataquerySql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcb\x31\x0a\x85\x30\x0c\x06\xe0\xbd\xa7\xc8\xf0\xc6\x87\xe0\x2c\x9e\xa5\xc4\xfa\x97\x16\x9a\x44\xda\x88\x78\x7b\x41\xf7\xef\x1b\x68\x48\x4e\xc9\xda\x29\x1a\x95\x05\x7f\xda\xd9\x39\xfa\x7d\x20\xe4\x6e\x42\x55\xb3\x75\x61\xaf\xa6\x71\xa4\x02\xe1\xe9\xe3\x23\x5c\x05\x1d\xe4\xbc\x35\xbc\x97\x56\xfa\xcd\x4b\x78\x02\x00\x00\xff\xff\x5a\x24\x1a\x9a\x55\x00\x00\x00")

func bindataDatabaseSqlMetadataquerySqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatabaseSqlMetadataquerySql,
		"database/sql/metadata_query.sql",
	)
}



func bindataDatabaseSqlMetadataquerySql() (*asset, error) {
	bytes, err := bindataDatabaseSqlMetadataquerySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "database/sql/metadata_query.sql",
		size: 85,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1667640672, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatabaseSqlMultiplejoinSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\xd0\x41\x4a\x44\x31\x0c\x06\xe0\x7d\x4f\xf1\x2f\x15\xe4\x81\x6b\xf1\x08\x73\x86\xc7\x9b\x26\x4a\xa4\x6d\x24\x49\x51\x6f\x2f\xd6\x51\x8b\xa8\x6f\x21\x4c\x37\x6d\x0a\x7f\xfb\xf3\x39\x17\xce\x81\xe0\x45\xe8\xea\x6d\xab\x4a\x5c\xd6\xd3\x90\xcb\xe6\x3e\x4e\x4f\x6a\xe4\x6b\xd6\xde\x62\xcc\xc6\xf7\xe2\x61\x5b\x88\xb6\x95\xb6\xe0\x71\x1b\xfc\x1c\xe9\xce\xb4\xe2\xb1\x1f\x8b\xe4\x25\xd8\xaa\xaf\xdc\x10\x8c\x07\x95\x86\x0b\x9c\x7e\x14\x4a\xf8\x7b\xcd\xef\x8c\x56\xbe\x97\x50\x23\x36\x1c\x5f\x30\x7a\x83\xd8\xf3\x5e\xa4\x48\x95\xc0\x35\x2e\xb1\x39\x0e\xd0\x86\xc3\x22\x84\xdb\x99\x22\xf5\x26\xda\xd2\x07\x95\xbd\x53\xd9\x4c\x65\x9f\x54\xf6\x8d\xca\x7e\xa4\xb2\xdf\xa8\xac\x23\xec\x9c\x54\x53\xdb\x7f\x82\x7d\x81\xdc\xa4\xd7\x00\x00\x00\xff\xff\xa8\x69\x80\x42\x57\x02\x00\x00")

func bindataDatabaseSqlMultiplejoinSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatabaseSqlMultiplejoinSql,
		"database/sql/multiple_join.sql",
	)
}



func bindataDatabaseSqlMultiplejoinSql() (*asset, error) {
	bytes, err := bindataDatabaseSqlMultiplejoinSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "database/sql/multiple_join.sql",
		size: 599,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1667640669, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatabaseSqlRecreateSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcd\x4e\x22\x4b\x14\xde\xf3\x14\x67\x09\xc9\xf5\xc6\x9b\xbb\xf4\xea\xab\x74\xca\xae\x83\x56\x6c\xaa\x49\x55\x11\x65\x07\x98\xe8\xc2\x9b\xb8\x9a\xcd\x6c\x26\x33\x9b\xd9\xf6\xa8\x44\x06\xa5\x7d\x85\x53\x6f\x34\xa9\xee\x06\x1b\x2c\xd2\xad\x10\x63\x26\x93\x10\x16\x7d\xce\xf7\xd1\xf5\x7d\x75\x7e\xe0\x2a\xee\x82\x0e\x8f\xb1\xc3\xa0\xdb\x3b\x8c\x44\x08\x21\xd3\x21\xe3\xb8\xd7\x08\x15\x32\x83\xcb\xd1\xbd\x46\x63\x67\x07\xe8\x0b\xa5\xf4\x60\xff\xa7\x7b\x4a\xe9\x86\x12\x3b\xa2\x31\x3d\xd0\xc4\xc5\x32\x46\xc3\x0e\x23\x04\xd1\x06\x3c\x13\xda\xe8\x02\xfc\x77\x4f\xa3\xd2\x0b\xe2\x45\x92\x8c\x8d\x2f\xb1\xd9\x00\x00\x10\x1c\x84\x34\x70\x84\x12\x15\x33\xc8\x81\x45\xa7\xac\xaf\x81\x69\x10\x1c\xa5\x11\xa6\x0f\x5d\x25\x3a\x4c\xf5\xe1\x04\xfb\x7f\x65\x20\xc9\x3a\x08\x06\xcf\x4c\xc6\x2d\x7b\x51\x94\x3f\x57\x78\x24\xb4\x51\xcc\x88\x58\x06\xdc\xbd\x44\xf6\x35\x4f\x82\xf0\x18\xc3\x13\x68\xb6\x85\xd2\x26\x60\x9c\x8b\xe7\xc4\x83\xfd\x97\xe8\x56\xce\xea\x4b\xf7\xf2\x46\xcc\x47\xeb\x81\x17\xc4\x9e\x7c\x2f\xaf\x41\xd5\xd1\x41\x18\xf7\xa4\x71\x84\xbb\x05\xbc\xfc\xd8\x69\xc8\xb1\xcd\x7a\x91\x81\xdd\x46\x6b\xaf\xd1\xc8\x9d\xfc\x6a\x47\x76\x60\xcf\x69\x6a\x47\xf6\xdc\x0e\x68\x66\xaf\x68\x0c\xf4\x48\x29\xdd\xe5\xa6\x82\x73\xd7\x0e\xe8\x91\x26\x34\x73\x7e\xd7\xf0\xaf\x13\x73\x8c\x36\x31\x30\x8c\x98\xd6\x19\x6e\xf5\xac\x79\xe4\x60\x1f\xfe\x01\x26\x79\x91\xf8\xdf\x3e\xfc\x5b\x1c\xfa\x34\x56\xbc\x7c\xe8\x55\x7c\x39\x5e\xd2\xaa\xe2\x66\xcc\x05\x3d\x33\xcb\xd7\xaa\xa4\xe4\x27\xba\xcb\x14\x9a\xd8\x0b\x7b\x05\x4e\x54\x3b\xb4\x43\x9a\x52\x4a\xb7\x94\x82\xbd\xa6\x7b\x7b\x45\x53\x4a\x6a\xe8\x97\x3b\xa7\x7a\x1b\x28\x98\x59\x10\xe4\xd0\xe2\x9a\xc6\x0a\xc5\x91\x74\x29\xd0\x9c\x87\x5b\xa0\xb0\x8d\x0a\x65\x88\xab\xee\x09\xde\xfa\x4d\xcc\xa0\x84\x66\x74\xeb\x2e\x33\xfd\xdc\xcc\x12\x94\x7f\x2c\x79\xa3\x25\x9f\x29\xa5\x59\x36\x29\xa6\x76\x68\x47\xae\x46\xce\xe9\x89\x52\xd7\x80\x68\x4c\x3f\xe8\x81\xc6\x99\x63\xd7\x55\x63\x24\x8c\xa5\xfb\x91\x5a\x93\x64\x9e\xbb\x81\x6d\xab\x6d\xb4\x66\xf7\xad\x12\x7a\x0d\x6c\x73\xa1\xbf\x53\xe2\x04\x76\x9d\x7b\x40\x63\x7b\x49\x13\x68\xda\x21\x3d\xd9\x01\x25\x74\x43\xa9\xbd\xa4\x19\x25\xf6\xda\x35\xf6\x24\xd3\x7d\x62\x2f\x28\x69\x55\xc9\xde\x65\xca\xe8\x20\x6e\x07\xba\x8b\x18\x1e\xd7\x51\x7f\x05\xf2\xfe\x13\xbd\x24\xcb\xb7\xf2\x61\x77\xec\x90\x6e\x5c\xfd\xbb\xea\x87\xa6\xbb\x87\xbe\x85\x06\xdc\x67\x5c\xb7\xb1\x57\x2a\x98\xad\x35\x01\x93\x3c\x98\x37\xf8\xda\xcb\xd0\x12\x2a\xd7\xd1\x3d\x5f\xdf\x4d\x8a\xa8\xaf\x99\xe4\xdb\xd5\xa2\x97\x38\xd6\xf5\x3c\x45\xd4\xc7\xb3\x78\x9d\x05\x95\xdf\x8d\xed\x9b\x50\xd9\xd0\x5f\x6d\x05\xca\xb7\x58\x31\x1f\x07\x1f\xc4\x0a\x94\xdb\xb2\x62\x5a\xbb\x59\x6f\xb9\x44\xe6\xfd\xfa\xd5\x55\xe2\x05\xe6\xee\x14\xa1\xf5\xc2\x3e\x27\xf8\xb4\x5d\x8c\x90\xed\x56\xcc\xbb\x58\xb1\x79\xa1\x78\x74\xad\x57\x2b\x5e\xe0\xc7\x34\x24\xaf\x9b\x9a\x86\x64\x26\xbc\xf2\x2f\x93\x73\xc6\x5e\xbe\x98\xcb\x95\xe2\xe7\x6b\x5f\xa6\x60\x37\xae\xb5\xef\x2c\x23\x9a\xdb\xde\x3b\xbb\xb1\x5e\x4f\x94\x07\x7d\x34\xab\x7b\x40\xa1\xf6\xaf\x00\x00\x00\xff\xff\x2c\x6e\xd0\x6e\x7e\x10\x00\x00")

func bindataDatabaseSqlRecreateSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatabaseSqlRecreateSql,
		"database/sql/recreate.sql",
	)
}



func bindataDatabaseSqlRecreateSql() (*asset, error) {
	bytes, err := bindataDatabaseSqlRecreateSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "database/sql/recreate.sql",
		size: 4222,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1668598016, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatabaseSqlScalarfunctioncallSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\x48\x4f\x2d\x89\xcf\x49\x2c\x49\x2d\x2e\x89\x2f\x4a\x4d\x8f\x4f\x49\x2c\x49\xd5\xd0\xb4\xe6\x02\x04\x00\x00\xff\xff\x97\xc2\x15\x40\x1e\x00\x00\x00")

func bindataDatabaseSqlScalarfunctioncallSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatabaseSqlScalarfunctioncallSql,
		"database/sql/scalar_function_call.sql",
	)
}



func bindataDatabaseSqlScalarfunctioncallSql() (*asset, error) {
	bytes, err := bindataDatabaseSqlScalarfunctioncallSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "database/sql/scalar_function_call.sql",
		size: 30,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1667730563, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatabaseSqlScalarfunctioninitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\x8c\x31\x8e\xc3\x30\x0c\x04\x7b\xbd\x62\x0b\x15\x76\x73\x1f\xb8\xc7\x18\x8c\xb2\x16\x04\xd0\x92\x43\x52\x40\x9e\x1f\x58\xdd\x2e\x30\x33\xc5\x28\x41\x0c\x83\xf1\x56\x29\xc4\x39\x7b\x89\x36\x3a\x2a\xe3\x50\x09\x7a\x1c\xc6\x7a\xbc\x25\xb8\xed\xc9\x18\xd3\xba\xe3\xb9\x09\x00\xc4\x91\xf3\x5a\x4e\x65\x09\x5c\xf2\xdd\x8c\xb5\x79\x98\x3c\xa1\x65\xee\x8b\x38\x6d\x5c\xb8\xe7\x4b\x5b\xf9\x9b\x4e\xf3\x94\x33\x54\x7a\x9d\x52\x09\xff\xe8\x7f\xfa\x05\x00\x00\xff\xff\x45\x7c\xf7\xb6\x91\x00\x00\x00")

func bindataDatabaseSqlScalarfunctioninitSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatabaseSqlScalarfunctioninitSql,
		"database/sql/scalar_function_init.sql",
	)
}



func bindataDatabaseSqlScalarfunctioninitSql() (*asset, error) {
	bytes, err := bindataDatabaseSqlScalarfunctioninitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "database/sql/scalar_function_init.sql",
		size: 145,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1667730575, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatabaseSqlScalarquerySql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xca\x41\x0e\x82\x40\x0c\x46\xe1\xfd\x9c\xe2\x5f\x82\x0b\x2f\xe0\x61\x48\x29\x95\x90\x94\x96\xb4\x53\x8d\xb7\x37\x51\xe3\x92\xe5\x97\xf7\x52\x54\xb8\x83\x1e\xeb\xf0\xf4\x58\x72\x62\x2f\xeb\x63\xbb\x87\xef\x18\x7e\xf5\x82\x0f\x8f\x9a\x75\xe3\x6b\x97\xd8\x73\x8a\x42\xd9\xe6\x86\x93\x47\x6c\x04\x25\xbe\x20\xd5\xb6\x86\xd7\x81\xf9\x05\x56\xca\x6c\x1e\x8b\xc4\x9f\xa0\xe4\x5b\x7b\x07\x00\x00\xff\xff\xc5\x48\xe8\x0d\x91\x00\x00\x00")

func bindataDatabaseSqlScalarquerySqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatabaseSqlScalarquerySql,
		"database/sql/scalar_query.sql",
	)
}



func bindataDatabaseSqlScalarquerySql() (*asset, error) {
	bytes, err := bindataDatabaseSqlScalarquerySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "database/sql/scalar_query.sql",
		size: 145,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1667463595, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatabaseSqlStoredprocedurecallSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x4e\xcc\xc9\x51\xc8\xcc\x2b\x4e\x2d\x2a\x89\x2f\x49\x2d\xca\x8d\x4f\xcd\xd3\xc8\x2b\xcd\xc9\xd1\x51\x50\x31\xd4\x51\x50\x31\xd2\x51\x50\x31\xd6\x51\x50\x31\xd1\x51\x50\x31\xd5\xb4\xe6\x02\x04\x00\x00\xff\xff\x5c\x8f\x96\x4d\x2f\x00\x00\x00")

func bindataDatabaseSqlStoredprocedurecallSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatabaseSqlStoredprocedurecallSql,
		"database/sql/stored_procedure_call.sql",
	)
}



func bindataDatabaseSqlStoredprocedurecallSql() (*asset, error) {
	bytes, err := bindataDatabaseSqlStoredprocedurecallSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "database/sql/stored_procedure_call.sql",
		size: 47,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1667735432, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatabaseSqlStoredprocedureinitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x51\x6a\xc4\x30\x0c\x44\xff\x7d\x0a\x7d\xe4\x63\x17\xbc\xbd\x40\x0e\x63\xbc\xf6\x60\x0c\x8e\x9c\x4a\xf2\xb6\xbd\x7d\x89\x03\xdd\x40\x7f\x84\xa4\x81\x99\x37\x49\x10\x0d\xd4\x85\x04\x7b\x8b\x09\xb4\x4b\x4f\xc8\x43\x40\x95\x15\x62\xc1\x20\x5b\x00\xbb\x9b\x23\x22\xaa\x99\x2a\x9b\x9f\xfb\xd6\x33\x5a\xb8\x7e\x52\x8b\xaa\xef\xf3\xab\x4b\xd6\x90\xfa\x60\x7b\x3f\x05\xa5\xaa\x49\xb4\xda\x39\xe4\x23\xfd\x18\xa7\x66\xf8\xb6\x39\xdc\xdd\x45\xa5\x65\x71\x4f\x94\xca\x67\xf2\xc4\x39\x7c\x3a\xed\xe3\xd9\x6a\xfa\x38\xd0\x34\x80\xa9\xbf\x20\x52\x73\xe5\x42\x43\x21\xf4\x8a\x6d\x80\x1e\x8f\xa3\xd8\x45\xd3\x1f\x35\x6c\xa7\x3a\x3d\xe7\xa6\x74\xab\xd9\xff\xb5\xf1\x67\x0b\x7f\xa5\xf7\xff\xa9\xfd\xe4\xbc\xaf\x0e\x9c\x57\xb7\x2c\xd4\x22\x97\x11\x0b\x68\x6f\x7b\xd1\xcf\xb6\xba\xdf\x00\x00\x00\xff\xff\x12\xd6\x8e\xa1\x5d\x01\x00\x00")

func bindataDatabaseSqlStoredprocedureinitSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatabaseSqlStoredprocedureinitSql,
		"database/sql/stored_procedure_init.sql",
	)
}



func bindataDatabaseSqlStoredprocedureinitSql() (*asset, error) {
	bytes, err := bindataDatabaseSqlStoredprocedureinitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "database/sql/stored_procedure_init.sql",
		size: 349,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1667735475, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatabaseSqlSystemfunctionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\x52\x48\x2b\xca\xcf\x55\x48\x2e\x2d\x2a\x4a\xcd\x2b\x89\x2f\x2d\x4e\x2d\x52\xd0\xd5\x55\xf0\x0f\x52\x40\x55\x50\x90\x1e\x9f\x9c\x58\x92\x98\x93\x9f\xae\xa7\x84\xac\x58\x49\x43\x93\x0b\x10\x00\x00\xff\xff\x11\xcd\x8e\x4e\x4b\x00\x00\x00")

func bindataDatabaseSqlSystemfunctionSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatabaseSqlSystemfunctionSql,
		"database/sql/system_function.sql",
	)
}



func bindataDatabaseSqlSystemfunctionSql() (*asset, error) {
	bytes, err := bindataDatabaseSqlSystemfunctionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "database/sql/system_function.sql",
		size: 75,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1667739227, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatabaseSqlTablefunctioncallSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\x52\x48\x2b\xca\xcf\x55\x48\x4f\x2d\x89\x2f\x2d\x4e\x2d\xd2\x50\x31\xd4\xb4\xe6\x02\x04\x00\x00\xff\xff\x5f\xcb\x5a\xb7\x1c\x00\x00\x00")

func bindataDatabaseSqlTablefunctioncallSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatabaseSqlTablefunctioncallSql,
		"database/sql/table_function_call.sql",
	)
}



func bindataDatabaseSqlTablefunctioncallSql() (*asset, error) {
	bytes, err := bindataDatabaseSqlTablefunctioncallSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "database/sql/table_function_call.sql",
		size: 28,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1667729833, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatabaseSqlTablefunctioninitSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\x3f\xae\xc2\x30\x1c\x83\xf7\x9c\xc2\x43\x86\xf7\x18\x7a\x01\xc4\x59\xaa\x90\xba\x21\x52\x48\xca\xef\x8f\xb8\x3e\x0a\x62\xe9\x62\xc9\x9f\x2d\x7d\x59\x98\x8c\x18\x02\xe1\xd1\x52\x26\x76\xef\xd9\xea\xe8\x28\xb4\xd5\x95\xf2\x37\x63\xad\x1b\x6a\xb7\xff\x20\x34\x97\xae\x38\xfc\xde\x6a\x5e\xe6\xa6\x21\x29\x62\x0c\x00\xa0\x6c\xcc\x86\xcb\xb7\xec\x32\x9e\xe7\xe3\xa4\xef\x07\x85\x27\xbc\xd4\x0d\x37\xfc\x34\x21\x46\xb4\xd4\x8b\xa7\x42\xe8\xab\x5d\xc3\x27\x00\x00\xff\xff\xba\xee\x98\x2b\xa4\x00\x00\x00")

func bindataDatabaseSqlTablefunctioninitSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatabaseSqlTablefunctioninitSql,
		"database/sql/table_function_init.sql",
	)
}



func bindataDatabaseSqlTablefunctioninitSql() (*asset, error) {
	bytes, err := bindataDatabaseSqlTablefunctioninitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "database/sql/table_function_init.sql",
		size: 164,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1667729827, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"database/sql/cte.sql":                   bindataDatabaseSqlCteSql,
	"database/sql/fill.sql":                  bindataDatabaseSqlFillSql,
	"database/sql/metadata_query.sql":        bindataDatabaseSqlMetadataquerySql,
	"database/sql/multiple_join.sql":         bindataDatabaseSqlMultiplejoinSql,
	"database/sql/recreate.sql":              bindataDatabaseSqlRecreateSql,
	"database/sql/scalar_function_call.sql":  bindataDatabaseSqlScalarfunctioncallSql,
	"database/sql/scalar_function_init.sql":  bindataDatabaseSqlScalarfunctioninitSql,
	"database/sql/scalar_query.sql":          bindataDatabaseSqlScalarquerySql,
	"database/sql/stored_procedure_call.sql": bindataDatabaseSqlStoredprocedurecallSql,
	"database/sql/stored_procedure_init.sql": bindataDatabaseSqlStoredprocedureinitSql,
	"database/sql/system_function.sql":       bindataDatabaseSqlSystemfunctionSql,
	"database/sql/table_function_call.sql":   bindataDatabaseSqlTablefunctioncallSql,
	"database/sql/table_function_init.sql":   bindataDatabaseSqlTablefunctioninitSql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"database": {Func: nil, Children: map[string]*bintree{
		"sql": {Func: nil, Children: map[string]*bintree{
			"cte.sql": {Func: bindataDatabaseSqlCteSql, Children: map[string]*bintree{}},
			"fill.sql": {Func: bindataDatabaseSqlFillSql, Children: map[string]*bintree{}},
			"metadata_query.sql": {Func: bindataDatabaseSqlMetadataquerySql, Children: map[string]*bintree{}},
			"multiple_join.sql": {Func: bindataDatabaseSqlMultiplejoinSql, Children: map[string]*bintree{}},
			"recreate.sql": {Func: bindataDatabaseSqlRecreateSql, Children: map[string]*bintree{}},
			"scalar_function_call.sql": {Func: bindataDatabaseSqlScalarfunctioncallSql, Children: map[string]*bintree{}},
			"scalar_function_init.sql": {Func: bindataDatabaseSqlScalarfunctioninitSql, Children: map[string]*bintree{}},
			"scalar_query.sql": {Func: bindataDatabaseSqlScalarquerySql, Children: map[string]*bintree{}},
			"stored_procedure_call.sql": {Func: bindataDatabaseSqlStoredprocedurecallSql, Children: map[string]*bintree{}},
			"stored_procedure_init.sql": {Func: bindataDatabaseSqlStoredprocedureinitSql, Children: map[string]*bintree{}},
			"system_function.sql": {Func: bindataDatabaseSqlSystemfunctionSql, Children: map[string]*bintree{}},
			"table_function_call.sql": {Func: bindataDatabaseSqlTablefunctioncallSql, Children: map[string]*bintree{}},
			"table_function_init.sql": {Func: bindataDatabaseSqlTablefunctioninitSql, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
