// Code generated by go-bindata. DO NOT EDIT.
// sources:
// sql/query1.sql
// sql/query2.sql
// sql/query3.sql
// sql/task1.sql

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSqlQuery1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4d\x4b\xc3\x40\x18\x84\xef\xfb\x2b\xe6\xd6\x44\x42\xa9\x78\x52\x69\xa1\x86\xd5\x83\x1f\x91\x34\x45\x3d\x95\x98\xbc\xb6\x2b\xd9\x0f\x92\x57\x25\xff\x5e\x76\xc5\x6d\xc4\x3d\xec\x61\x98\x79\x66\x76\x37\xf2\x4e\xe6\x15\xda\x9a\x69\xe7\xea\x9e\x33\xe4\xc5\xf6\xa1\x4a\x48\xbb\xce\x8e\x44\x3b\xd5\xa6\x58\x6f\xd0\x18\xce\xd0\x92\xb7\x68\x32\x2c\xae\xcb\xe2\x5e\x00\x40\x12\x6e\x7f\x06\xea\xa8\x61\x4c\x92\x19\xe4\x73\x55\xae\xf3\x2a\x79\x92\xf2\x16\x3e\x13\x9a\x02\xf1\x5f\xe5\x49\x8a\x7a\x40\xe7\xe5\xc6\x70\xc4\xbe\xf5\x56\x83\x95\xa6\x01\x47\xf1\xeb\x40\x3d\x81\x47\x47\x58\xe2\x34\xca\xfb\xde\x7e\x38\xbc\x8e\x7f\x47\xc4\xa6\xe8\x3b\xd4\x9f\xca\xec\xa1\x95\x49\x3c\x39\xc5\x0a\xb3\xf3\x8b\xc5\x62\x16\x1c\x61\x1e\x6b\x87\x77\xab\x4c\x44\x0d\x20\x58\xe3\xf5\xf9\x84\x8e\x25\x68\xae\x5a\xf1\x33\xe8\x77\x3c\x56\x38\x13\x37\x65\xb1\x7d\xc4\xd5\xcb\xf4\xa5\xc7\x1f\xbc\x14\xdf\x01\x00\x00\xff\xff\x3b\x04\x4f\x1d\x7b\x01\x00\x00")

func bindataSqlQuery1SqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlQuery1Sql,
		"sql/query1.sql",
	)
}



func bindataSqlQuery1Sql() (*asset, error) {
	bytes, err := bindataSqlQuery1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/query1.sql",
		size: 379,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1671164464, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlQuery2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xcf\x6e\xf2\x30\x10\xc4\xef\x79\x8a\xb9\x61\x4b\x80\x72\xfc\xc4\xd7\x1e\x10\x4d\x6f\x6d\xa5\x28\x95\xda\x93\x65\xf0\x02\xae\xe2\x38\xb2\x0d\x55\xde\xbe\x32\xa4\x0d\xe0\xfe\x93\xba\x97\xc8\x9e\x1d\xcf\x4f\xbb\xf1\x54\xd3\x2a\x40\xee\x37\xac\x78\xaa\xca\xf9\xa2\x62\xcf\xc5\xbc\xc4\x6d\xf9\x70\x87\xc5\x63\x59\x16\xf7\x95\xb8\x99\x57\x05\xc7\x04\x69\x87\x92\x81\x84\x5d\x8b\xa5\x76\x61\xcb\x79\xb6\x76\xd6\x80\x4c\x5b\xdb\x8e\xc8\xe3\xc5\xea\x26\x43\x2c\x76\xfc\xc4\xea\x23\x95\xf6\x41\x37\xab\x00\xdb\x80\xbd\x5b\x84\x56\xe3\xc3\xa3\x1c\xc9\xd5\x18\x7e\x67\x58\x30\xad\x50\x3b\xc7\x61\xf7\xe4\xc0\x5a\xe9\x82\x0e\xda\x36\x58\x76\xa9\x85\x43\x7a\x28\xd9\x45\xc7\x00\x10\x21\x87\xd3\x05\xdd\x05\xe5\x27\x14\x41\x1b\x1a\xa7\x86\xbe\x42\xd7\x7e\xa3\xd6\x72\xc3\xa2\xff\x77\xf8\xb0\x4e\x91\x8b\xd2\xd1\x23\x3d\x5a\x47\x7b\xf1\x03\x81\x36\x34\xf9\x73\x50\x3f\xe7\x34\xe5\xb0\xe2\xd8\xe6\x11\x52\xf5\xe3\xa1\x2f\x06\x77\xee\x38\x24\x79\x23\xeb\x3a\x66\xc9\xc8\xe7\xb3\x41\xe9\x37\x77\x7a\x6f\x9b\xe1\xf7\x9a\x6a\x85\xeb\xf3\xa6\xe9\x49\x6c\xf6\xba\x25\x47\x17\x7a\x7f\xc2\x15\x46\xf9\xbf\x59\x9e\xcf\xf2\x7c\xf4\x3f\x7b\x0b\x00\x00\xff\xff\x1b\x45\x05\xc6\x06\x03\x00\x00")

func bindataSqlQuery2SqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlQuery2Sql,
		"sql/query2.sql",
	)
}



func bindataSqlQuery2Sql() (*asset, error) {
	bytes, err := bindataSqlQuery2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/query2.sql",
		size: 774,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1671164464, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlQuery3Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xc1\x8a\xc2\x30\x18\x04\xe0\x7b\x9e\x62\x6e\x4d\x60\x09\xd9\xe3\x76\xa9\x20\x35\x6a\x45\x13\x89\x2d\x1e\x45\xcd\x7f\x08\xd8\x5a\xec\x7f\xe9\xdb\x4b\xc1\x1e\x9c\xf3\x37\xc3\x9c\xec\xde\x96\x35\x48\x47\xea\xaf\x2f\x6e\xa9\xe3\x1f\x94\xbe\x71\xb5\x8c\x69\xe0\xd4\xdd\x19\xa4\x53\x54\x62\x1d\xfc\x01\xd4\xf6\x8f\xe7\x48\x34\x80\x04\xe6\x54\xce\xd9\x80\x9d\xaf\x1c\x38\xb5\x34\x80\xe1\x1d\x24\xeb\x59\x5f\x52\x44\xf1\x99\x39\x6f\x6d\xb0\x90\x92\xf5\x64\xb1\x40\x66\xfe\x72\x63\x72\x63\x32\x85\xa5\x5b\x4d\x3d\x1e\x7b\x42\x81\x5f\xa5\xc4\x26\xf8\xe6\x88\xdb\xf8\xf5\xf0\x5f\xbc\x03\x00\x00\xff\xff\xb1\x56\x84\x9b\xb7\x00\x00\x00")

func bindataSqlQuery3SqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlQuery3Sql,
		"sql/query3.sql",
	)
}



func bindataSqlQuery3Sql() (*asset, error) {
	bytes, err := bindataSqlQuery3SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/query3.sql",
		size: 183,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1671164464, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlTask1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x6f\xdb\xcc\x11\xbe\xf3\x57\xcc\xc1\x80\x49\x57\x14\x24\xf9\xe3\x7d\x5d\x37\x01\xf4\xea\x65\x6c\xb5\x8e\xf4\x96\x96\x92\xe6\x64\x30\xe2\xda\x66\x23\x91\x0a\x49\x39\xd1\xcd\x92\x9b\x2f\xc4\x70\x80\xa0\xd7\x22\xe8\xa9\x57\x45\xb5\x10\xe5\xc3\xca\x5f\xd8\xfd\x47\xc5\x2c\x97\x22\x69\xd1\x31\xdd\x96\x07\x83\x5e\xcd\xec\xcc\xce\xf3\xcc\xb3\x43\xd3\x75\xba\xe0\x1b\x8f\xdb\x04\xac\x03\x20\xcf\x2d\xcf\xf7\xc0\xb7\x3a\xc4\x83\x96\xe1\xb5\x0c\x93\x6c\x49\xa9\x36\xa4\xd3\x6d\x3b\x7d\x12\xb7\x93\x5a\x2e\x31\x7c\x12\x99\xda\x8e\xbf\x60\x2e\x4b\x90\xf1\xb1\x4c\xa8\xd6\x1a\xd0\x75\xad\x8e\xe1\xf6\xe1\x09\xe9\xe7\x32\xfb\xda\x46\x87\xc0\x83\xb2\x5e\xd9\x29\xeb\xf2\xc6\x9a\x92\xdd\xd3\x34\x7c\xb2\xef\x1c\xec\x3f\xb6\x5c\xff\x08\x7e\x2d\x37\xb4\x5b\xf8\x92\xae\xe1\xfa\x1d\x62\xfb\xf1\xd8\x92\xb2\x25\x49\x96\xed\x11\xd7\x07\xcb\xf6\x9d\xab\xb5\xb0\xcc\x20\x02\xe6\x1c\xbc\x25\x72\x10\x4b\xf3\xad\x25\x05\x8e\x8d\x76\x8f\x78\x22\x2d\xb9\x90\x83\x65\xad\xb0\x9c\x83\xe5\xe2\xe6\x66\x51\x2d\x96\xd4\xe2\x06\xfe\x77\xaf\x5a\x5b\x9e\x1f\x5c\x2e\xa2\x55\x51\x58\x95\xae\xb3\x2a\xa1\x55\x49\x58\xad\x46\x56\xd5\x46\xcc\x68\x15\x8d\x56\x85\xd1\xda\x35\x46\x6b\x68\xb4\x26\x8c\xd6\x93\x46\x5b\x92\xe4\x91\x36\x69\xf9\xb0\x02\x07\xae\xd3\x89\x2a\xb2\x25\x49\x3f\xa4\x11\x67\x66\x36\x0a\x85\x7b\xee\x07\x3c\xca\x86\xe2\x81\xe3\x12\xeb\xd0\x46\xb2\x81\x1c\xdb\x41\x01\x97\x1c\x10\x97\xd8\x2d\x12\xe7\xb2\x65\x66\x64\x16\x22\xca\xc9\x04\x26\x39\x30\x7a\x6d\x1f\x2a\x4d\x5d\xd7\x6a\x8d\xfd\xec\x0c\x33\x8d\x3e\x92\xe2\x19\x21\x4f\x6e\x4f\x6d\x2c\x1c\x34\xaa\xf7\x17\x13\xc0\xc5\x8c\x7b\xf4\xbb\x84\xb7\x64\xeb\x88\xb4\x9e\x80\xcc\xff\xbf\x03\x45\x70\x5c\x10\xef\xa5\x45\xb6\xc7\x20\x8b\x15\x34\x22\x7a\xf8\x36\x3f\x5c\xb0\x80\x6e\xe2\xad\xdf\x25\xa9\xa4\x2f\x15\x4a\x31\x22\xd3\x0f\xec\x1d\x1b\xd2\x4b\x3a\x65\x2f\xe9\x08\x57\x0a\x9b\xbf\x2f\x60\x5f\x14\x23\x56\x66\x74\x2b\x62\x0b\x94\x92\x8c\xbf\xe2\xf6\x2f\x3a\x61\x43\x3a\xa6\x13\x76\x42\xff\x1d\x46\x5b\x4f\x46\xcb\xe8\xb6\xba\x7e\x63\xb4\x7f\xb2\x13\x3a\xa1\x17\xd1\xb9\x7e\xba\x31\xd2\x55\x97\xb5\x9b\xa3\xbc\x67\x43\x3a\x63\x27\x58\x0c\xfa\x25\x74\xdb\xb8\x31\x52\x9a\xdb\x7a\xe1\xc6\x68\x1f\xe8\x8c\x5e\xf2\x14\x27\xf4\x2b\x3b\xbb\x6d\xd4\x1f\xb9\x5f\x8d\xbe\xf6\xdf\xe1\x97\xd1\xed\x2a\x7e\x29\x6e\x37\xe1\x97\xc1\xe5\x2a\x7e\x29\x2e\x59\xf0\xcb\xe8\x96\xa1\x82\xb7\xc1\xef\x96\xee\x22\xfa\xc2\x3d\xc1\xb5\x64\x4b\x92\x2a\xba\x86\x5a\x5a\xd7\x41\xd7\x7e\xdb\x2d\x57\x34\xb8\xd7\xac\x55\x1a\xd5\x7a\x0d\x1e\x58\x9e\xe5\xcb\xa6\xcf\xd5\x56\xe1\xf1\x75\xad\xd1\xd4\x6b\x7b\xd0\x28\xff\xb2\xab\x25\x94\x6e\xf1\x26\xe9\x58\x76\xcf\x27\x1e\x98\x4e\x0f\x6f\x9f\xae\x4b\x5a\x96\x67\x39\xf6\xa2\x42\xce\xc5\xec\xa9\xdf\x47\xa5\x4b\x18\x28\x52\x79\x4f\x5a\x5a\x92\xf6\xb4\x5d\xad\xd2\x00\xed\x2f\x0d\xbd\x5c\x69\x80\xbc\x53\x6f\xea\x7b\x70\x4f\xaf\xdf\x0f\x14\x59\x15\x2a\x85\x42\xa5\xc0\x0a\x6c\x14\xe0\x77\x91\xf5\xfd\x6a\xad\xd9\xd0\xae\xb5\xcf\x41\xa5\xde\xac\x35\xe4\x15\x05\xca\x7b\x89\x7c\xa4\xb9\x87\x27\x3d\xdc\xd1\x74\x2d\xb8\x80\xee\x80\x89\x69\x96\x6b\xbf\x06\xbb\xdd\x8d\xed\x16\xae\x0b\x4d\x97\xb6\xf5\x7a\xf3\x37\xf8\xe5\xd1\x62\x5c\x69\x69\x09\x76\xcb\xb5\xed\x66\x79\x5b\x83\xbd\x3f\xef\x6e\x49\xe1\x31\x57\x82\x4c\x03\x08\x10\xef\x82\x5a\x2c\xaa\xc5\x9f\xf8\x8d\x2f\x49\xaa\x0a\xf4\x1f\x74\x44\xbf\xd3\x29\x1b\xd0\x11\x1b\xb2\x33\x60\x7f\x63\xa7\xf4\x92\x7e\x61\x2f\xe9\x94\x9d\xe7\x80\x8e\xe9\x8c\x7e\xa2\x63\x76\x42\x47\xec\x0d\x1d\xb1\x73\xf6\x86\x9d\xb2\x73\xa0\x5f\xe8\x8c\x7e\xa5\x53\xf6\x8a\x4e\xd8\x80\xf7\xe0\x0c\xe8\x8c\x7e\xe7\xf6\x17\x74\x44\xc7\xec\x35\x9d\xb2\x17\xc0\x06\x74\xc6\x86\xec\x84\x9d\xd2\x8b\x80\x55\x74\x46\xc7\x79\xa0\x7f\xc7\x98\x74\x94\xf4\x42\xe1\x7f\x07\xf4\x3b\xef\x68\xde\x6f\xd8\xe1\x6c\x80\x8b\x63\x8c\x3a\x8a\x45\x9c\xa0\xe1\x08\x73\xa3\xdf\xb8\xd9\x09\x1d\xe5\xc3\x79\xc5\x71\xc1\x25\xdd\xb6\xd1\x22\x70\xd0\xb3\x5b\xbe\xe5\xd8\xd0\x36\x7c\x92\x24\xa3\x4b\xfc\x9e\x6b\x7b\x78\x8f\x4a\x86\x87\x1c\x11\x14\x9f\x63\x69\x78\x49\x6e\xa9\x2a\xe4\x80\x3c\xf7\x5d\xa3\xe5\xff\x9f\x19\x24\x45\x5d\x25\x3d\x3b\x22\x2e\x49\xf0\xc4\xb0\xcd\x54\x9e\xf0\xf5\x90\x27\x78\x26\x55\x85\x43\xd7\xe9\x75\xe1\x71\x3f\x9d\x2e\x6d\xc3\x3e\xec\x19\x87\x04\xbc\xa7\xed\x85\xa6\xe6\x35\x8a\xd4\x41\xb0\x25\x24\xcb\x67\x36\xa4\x53\x40\x44\x85\x52\xbc\xcd\x09\x60\x66\x81\x6c\xb1\xb7\x88\xf9\x0b\x8e\xf9\x19\x62\x7b\x41\xa7\xf4\x32\x85\x05\x01\xee\x23\xc4\x9d\xbd\xa5\xe3\x00\x68\xa0\x1f\x91\x57\xec\x8c\xbd\xa6\x13\x58\x55\x71\x2f\x84\xf7\x13\x0f\x12\xe9\xd3\x79\x3e\x24\x39\x1f\xce\x71\x18\x0f\xdb\x2f\x31\x26\x96\xf7\xa0\x65\xfb\xb9\xf8\xbc\x8e\xb5\x97\x92\x6a\x23\x0a\x10\x9f\x87\x42\xcc\xe4\x87\x9a\xf6\xa7\x00\x2f\x8c\xc4\x77\x5c\x08\x19\xb0\x04\x0b\xb7\xdf\x8a\x29\x4f\x84\x26\x44\x8b\x01\xae\x09\xbc\xf0\x99\x03\x96\x48\x62\x1e\x69\x6e\x77\x64\x1c\x5b\xf6\x21\xea\xa2\x8c\x3b\x2b\x48\x86\x4d\x41\x04\x00\x9e\x9e\xdf\xe9\xc2\x5f\x1d\xcb\x8e\x7d\x13\x12\x70\x6c\x5c\xcf\xc7\xa7\xf0\x3b\x40\xf2\x96\x29\x88\x16\x26\x0f\x77\x61\x35\x12\x9b\xd8\x49\xa3\x0a\x6e\x49\xaa\xba\x53\x7e\x50\xad\x6d\xa7\x55\xfc\x2e\xac\x26\xd4\x25\x20\x0c\x1b\x88\x76\x46\xe8\x3f\x0b\x59\xe1\xa2\x32\x60\xc3\x6b\x24\x22\xc7\x01\xc7\x3f\x23\xe4\x13\xbd\x60\xef\xd8\x1b\x94\x94\x40\x0d\x2e\xe9\x28\xe0\xc6\x47\x3a\x43\x4d\xa0\xdf\x80\xab\x00\x4a\xc3\x04\x7e\x06\xf6\x0a\x77\xc7\x8d\x38\x77\x90\x37\x97\xec\x2c\x1f\xb2\xdd\x38\x3e\x94\x43\x8c\x1f\x69\x65\x3d\xc0\x38\xfe\x19\xa0\x80\x0a\x8b\x16\x89\x8f\x41\x45\xb4\x6c\x54\x69\x2c\xbc\x74\xf5\x32\x13\x21\x4d\xcb\xf3\x2d\xbb\xe5\x23\x18\xf2\x02\xce\xca\x22\xf4\x39\xf0\x7a\x1d\xd9\xef\x74\xf7\xcd\x9e\xab\x80\x73\x4c\x5c\x90\x11\x06\x8b\xab\x59\x1a\x5b\x38\x13\x71\x7a\x37\x7b\x6e\x94\x00\x26\x99\xbc\x31\x53\x3e\xda\xd2\xba\x20\xc8\x22\x1a\xfe\xd3\x1e\xe4\xf2\xf5\xbf\xb6\x8d\x43\xc1\xd4\x2c\xe9\x83\xe3\x9a\xc4\x0d\x85\x8b\x1f\xa6\xeb\x92\xe3\xfd\x1b\x32\xb0\x3a\x44\xfd\x9f\x03\x89\x3a\x2f\x46\x49\xed\xe3\xf9\x33\xdf\xe8\x9a\xc2\x25\x3d\x78\x24\xaf\x63\xb4\xdb\x18\xcb\xc0\xfc\xc4\x47\x54\x1c\xb9\xf8\xba\x13\x6b\xe4\x3c\x6f\xdb\x84\x51\xbc\xa5\xe7\x97\x46\xfc\x77\xf1\x1f\xfc\x01\x96\x0b\x3f\x8b\x4b\x60\xde\xa1\xef\xb9\xf4\x06\x4d\x33\x05\x3a\x66\x03\xec\xb8\x98\xba\x03\x2e\xa7\xdd\xf5\xe9\x3d\x1b\x29\x7f\x28\xdb\x69\x23\x01\xfd\x84\xd7\xfe\x98\x0d\x70\x90\x98\xf2\x2d\x71\xe0\x9d\xb2\x73\x60\xa7\x3c\xca\x10\x2f\x72\xa1\xf0\x24\x1f\x69\x4f\xa8\xb8\xf3\x56\x42\x09\x53\x82\xf9\x2a\x26\x77\x51\xcd\xab\xb5\x9a\xa6\xc3\x1f\xeb\xd5\x5a\x88\x20\xd4\x6b\x20\xfb\x29\x4a\xa8\x88\xd9\x4c\x96\xfd\xfc\xc2\x3d\xab\xf0\x71\x0c\x7f\x11\xca\xad\x28\x42\x26\x11\xf9\x7c\x5c\x1d\x25\xe9\x3f\x01\x00\x00\xff\xff\xb0\xa7\xff\x3d\xc6\x13\x00\x00")

func bindataSqlTask1SqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlTask1Sql,
		"sql/task1.sql",
	)
}



func bindataSqlTask1Sql() (*asset, error) {
	bytes, err := bindataSqlTask1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/task1.sql",
		size: 5062,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1671179677, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"sql/query1.sql": bindataSqlQuery1Sql,
	"sql/query2.sql": bindataSqlQuery2Sql,
	"sql/query3.sql": bindataSqlQuery3Sql,
	"sql/task1.sql":  bindataSqlTask1Sql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"sql": {Func: nil, Children: map[string]*bintree{
		"query1.sql": {Func: bindataSqlQuery1Sql, Children: map[string]*bintree{}},
		"query2.sql": {Func: bindataSqlQuery2Sql, Children: map[string]*bintree{}},
		"query3.sql": {Func: bindataSqlQuery3Sql, Children: map[string]*bintree{}},
		"task1.sql": {Func: bindataSqlTask1Sql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
