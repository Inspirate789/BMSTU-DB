// Code generated by go-bindata. DO NOT EDIT.
// sources:
// sql/query1.sql
// sql/query2.sql
// sql/query3.sql
// sql/task1.sql

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSqlQuery1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\x41\x4a\x86\x50\x1c\x04\xf0\xfd\x3b\xc5\x2c\x13\x32\x74\x1d\x74\x17\xd3\x97\x09\xea\x13\x7d\x06\xee\xd4\x68\xe5\x19\xba\x83\x89\x0f\x2c\xc9\x33\xcc\xff\x46\x1f\xba\xfa\x96\xf3\x9b\x19\xdf\x47\xe8\x81\xdf\x9c\xf9\x2b\x23\x37\x70\x91\x81\x0e\x3c\x64\xe4\x4a\xc7\x5d\xa6\x47\x70\x01\xff\x2e\x3a\xa4\x97\x49\xbe\x20\x3d\x67\xfe\x5c\x34\xd3\xc9\x88\x33\x70\xa7\xa3\x43\x18\x40\x86\xb3\x92\x5e\x3e\xb9\xf2\x9f\xdb\xf9\xe6\xf2\xa4\x1a\x9d\xeb\xd8\x22\xd1\x55\x54\xdb\x42\x97\x56\xbd\xd5\xa6\x80\x2e\xaa\xdc\x74\x5a\x37\x2a\xad\x4d\x5b\xe1\xb5\xbb\x9f\xbc\x47\x1f\x59\x99\x22\x36\x6d\x69\x1f\xb2\xc4\xc3\x0b\xc2\xe0\x59\xdd\x02\x00\x00\xff\xff\x45\xd4\x46\xc5\xbb\x00\x00\x00")

func bindataSqlQuery1SqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlQuery1Sql,
		"sql/query1.sql",
	)
}



func bindataSqlQuery1Sql() (*asset, error) {
	bytes, err := bindataSqlQuery1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/query1.sql",
		size: 187,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1671278455, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlQuery2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x4f\x4a\xc3\x40\x14\x87\xf7\x73\x8a\xdf\xae\x56\x1a\xb1\xe3\x52\x7a\x16\xa9\xcd\xd8\x06\x9a\x3f\x24\x53\x25\xbb\x64\x44\x5c\x74\xd1\x13\x78\x87\x18\x13\xa8\x62\xe6\x0c\xbf\x77\x23\x49\x70\x21\xb8\x79\x8f\xc7\xfb\xbe\x2f\x08\xa0\xe7\xe0\x1b\x1b\x7e\x8a\xe3\x19\x52\xd3\x8b\x93\x4a\x9e\xd9\x71\xe0\x99\x5f\xf4\x6c\x17\x18\xb7\x38\x7a\xa9\xe4\xc8\x1e\x1c\xc6\xd1\xca\x51\x5e\xe8\xd9\xc9\x49\x1c\xa4\x86\x54\x6c\xf8\x4e\x2f\xaf\xec\xf9\x41\x0f\x7e\xb3\x97\x5a\x1c\x1b\xb0\x85\x38\xf6\xd3\x6b\x0c\x4f\x7e\xfd\xcb\xfd\x17\x3b\x0e\x72\xba\x52\x85\xd9\x9b\x8d\x45\x18\x15\x36\x4a\x36\x16\x26\xce\xf6\x69\x69\xcc\x5d\x14\xaa\x87\x3c\x8d\x61\xa3\xd8\x14\xea\x69\x67\x72\x03\x5b\x66\x06\x2b\x68\xac\x93\x10\xe1\xda\x8e\xc7\x4c\x5f\x6b\x1d\x2c\x75\xb0\xbc\x99\xa9\x6d\x9e\x1e\x32\xdc\x97\x7f\x33\x8b\x89\x54\xbb\xf5\x63\x94\x6c\xb1\x49\x0f\x89\xbd\xb8\x9c\x63\x85\xe5\xad\xfa\x09\x00\x00\xff\xff\x51\x33\x40\x0b\x1f\x01\x00\x00")

func bindataSqlQuery2SqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlQuery2Sql,
		"sql/query2.sql",
	)
}



func bindataSqlQuery2Sql() (*asset, error) {
	bytes, err := bindataSqlQuery2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/query2.sql",
		size: 287,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1671278467, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlQuery3Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x41\x4a\xc3\x50\x14\x45\xe7\x59\xc5\x9d\xb5\x85\x56\x2a\x8e\x54\xd4\xa5\x48\x34\xcf\xf6\x43\xf3\x1b\x92\xaf\xd2\x59\x9b\x22\x08\x15\xc1\x05\xb8\x87\x12\x1a\x8c\x95\xc4\x2d\xdc\xb7\x23\xf9\xdf\x3a\x72\xf6\xee\x79\xf7\x9e\xd1\x08\x27\x03\xf0\x9d\x5b\x7e\x6a\xc9\x06\xac\x74\xc5\x1a\xec\xb4\xe4\x8e\x35\xbf\x74\x33\x04\x2b\x70\x1f\x50\xa7\x4b\xdd\xe8\x13\x58\xeb\x4a\x4b\x7d\x81\xae\x3c\xd7\xa5\xae\xb9\x63\xcb\x86\x7b\x36\x43\xb0\xe3\x37\x3b\x7e\x70\xc7\x2d\x2b\x7d\x66\xe3\x9d\x55\xe0\xba\x64\x7d\x50\xbf\xb1\x65\xab\x6b\x7d\x85\x2f\x6a\xa9\xeb\xa3\xa8\x90\x99\xdc\x3a\x24\xa6\x70\xc6\xfa\x43\xb2\x38\x77\xa9\x58\x17\xdd\xe5\xf3\x14\x92\x66\xb3\xf9\x42\xa4\x80\x44\x8f\x53\xc9\x05\x26\x81\xb1\x40\x3f\x02\x80\xc3\xfc\xaf\x75\x6d\x92\x80\xc3\xd4\x99\x54\x8a\x10\x7f\x87\x6e\x91\x09\x2e\x70\x8c\xd8\x26\x48\x62\xe7\xc3\x55\xf8\x4f\xf2\xf9\x7d\x86\x9b\xc5\x3f\xcf\x34\x7e\x30\x76\x82\xd4\xd8\xbe\xb7\x0d\x70\x89\xde\xf8\xf4\x6c\x3c\xee\x45\x83\xf3\x9f\x00\x00\x00\xff\xff\x41\x67\x4d\xac\x4d\x01\x00\x00")

func bindataSqlQuery3SqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlQuery3Sql,
		"sql/query3.sql",
	)
}



func bindataSqlQuery3Sql() (*asset, error) {
	bytes, err := bindataSqlQuery3SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/query3.sql",
		size: 333,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1671279578, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSqlTask1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4d\x6f\xe3\x36\x10\xbd\xf3\x57\xcc\x21\x40\xa4\x20\x06\x24\xd9\xce\x47\x8d\x16\x30\x5c\x65\x1b\x20\xeb\x14\x8a\xd3\xab\x41\x4b\xe3\x58\x88\x25\xb9\x14\x1d\xc7\xb7\x74\x5b\xf4\x54\x20\x40\x2f\x3d\x16\x3d\xf5\x1a\xb4\x35\xb0\xc8\x22\xfb\x1b\xa8\x7f\x54\x90\xf2\xb7\x1d\x2d\x9d\x9c\x68\xe6\xbd\x79\xc3\xd1\xcc\x23\x03\x96\x0c\x80\xd3\x4e\x1f\x21\xec\x02\xde\x87\x29\x4f\x81\x87\x11\xa6\xe0\xd3\xd4\xa7\x01\xd6\xc8\x56\x0c\x46\x83\x7e\x32\xc6\x65\x1c\xf1\x19\x52\x8e\x0b\x68\x9c\xf0\x0d\xb8\x41\x40\xf3\x2f\x0c\xe0\xbc\xd9\x82\x01\x0b\x23\xca\xc6\x70\x8b\xe3\x43\x6d\x6e\x4c\x23\x84\x1f\xea\x5e\xe3\xbb\xba\x67\x1c\x55\x4c\x7d\x66\x40\x39\xb6\x93\x6e\xbb\x13\x32\xde\x83\x6f\xeb\x2d\x77\x07\x2e\x0e\x28\xe3\x11\xc6\x7c\x59\x9b\x98\x35\x42\xc2\x38\x45\xc6\x21\x8c\x79\xb2\x5e\x8b\x30\xc8\x15\x64\xce\xf9\x6a\x25\x87\xe9\xd6\x3c\x34\x31\xe1\x8e\xf6\x87\x98\x4e\xd3\x32\xac\x43\xd8\x77\xad\xfd\x43\xd8\xb7\x4f\x4f\xed\x92\xed\x94\xec\x23\xf9\xeb\xec\xbc\xb9\x3f\x3f\xb8\x61\x4b\x94\x3d\x45\x39\xaf\xa1\x1c\x89\x72\xa6\xa8\xf2\x02\x75\xde\x5a\x02\x95\x25\xa8\x3c\x05\x55\x5e\x01\x55\x24\xa8\x22\xb7\x1d\xcb\x3a\x7e\x05\x54\xd5\x91\x3b\xd2\x91\x3b\xd6\x91\x3b\xd1\x91\x3b\xd5\x91\xb3\x2d\x1d\x3d\xdb\xd6\x11\xb4\x1d\x2d\xc5\x72\x81\x62\x8d\x90\x14\xfb\xe8\x73\x38\x80\x2e\x4b\xa2\x45\x8b\xd5\x08\x29\x9c\x4b\x35\xea\x7a\x33\x39\x8b\xd9\xce\x07\x53\x6f\x2c\xba\x09\xc3\xf0\x26\x96\xd3\x0b\xc6\x52\x04\x13\x18\x76\x91\x61\xec\xe3\xb2\x39\x84\x81\xe6\xa8\xca\x11\x51\xd3\x09\x01\x76\xe9\xb0\xcf\xa1\x71\xed\x79\x6e\xb3\xd5\xd6\x1f\xd9\x80\x8e\xe5\x94\x8d\x10\x6f\x77\xf7\x0a\x59\x38\x68\x9d\xbf\xdf\x4c\x40\x6e\x6a\xc6\x18\x0f\x50\x79\x9c\xdf\x43\xff\x16\x0c\xf5\xfb\x6b\xb0\x21\x61\x30\x5d\x3b\x9b\xf6\xb1\xf4\xc9\x96\x0a\xba\x70\x8e\xd9\x6a\x7e\xb8\x7c\x43\xd2\xa6\xab\xf1\x00\xb7\xba\x88\x63\x39\xb9\x33\x54\x65\x63\x89\xbf\xc5\x24\xfb\x20\xfe\x11\x93\xec\x41\xfc\x2b\x77\xac\xd3\xaf\x2c\x69\x34\xf6\xa2\x2d\x35\x69\xb6\x1c\x02\x67\xd5\x42\x74\xd4\xaa\xab\x6a\x9a\xb4\x72\xb5\x40\x4d\x8d\x90\xf8\x2b\x7b\x10\x13\xf1\x9f\x78\x9a\x29\x1d\x17\x28\x6d\xa7\x54\x8a\x54\xd4\x38\x8b\xdf\xb3\x0f\xe2\x73\xf6\x20\x5e\xc4\x47\xf1\x3c\xa3\x1d\x15\x28\xbd\x4e\xab\x5a\x6f\x52\xab\x16\x55\xb0\x80\x76\x52\xa0\xa6\x0c\x4d\xfc\x29\x3e\x8b\x17\x55\x90\x89\xf8\x94\xfd\xa6\x7f\xc6\x2f\xd3\xd7\xcf\x5a\x79\x5b\xb7\x68\xd2\xd6\xbb\xa5\xb2\x7b\xb7\x68\x50\xd6\xbb\xa5\xf2\xb6\x6e\xd1\xa4\x15\x56\x70\xf7\xef\xb7\x23\x7d\xaa\xbe\x71\x2b\x29\xe7\x52\x37\x52\xa9\x04\xe2\x0f\xf1\x24\xeb\xa3\x98\x13\xb0\xa1\x04\xd9\x4f\xe2\x59\x3c\x89\x4f\xd9\xa3\x3a\xce\x53\xf6\x08\xd9\x2f\xd9\xcf\xe2\x45\x3c\x67\xbf\x8a\x8f\xd9\x23\x69\x78\xae\xf4\xfc\x4b\x0f\x3c\xf7\xfb\x8b\x7a\xc3\x85\xb3\xeb\x66\xa3\x75\x7e\xd9\x04\x4e\xd3\xdb\xb6\x6d\x98\x2a\x67\xcf\x6d\x5d\x7b\xcd\x2b\x69\xae\xa4\x7e\x45\xf6\xf6\x66\x99\xf8\xc9\x30\xe6\xc6\x81\x49\x56\xaf\x49\x40\x32\xea\x21\x43\xf9\xe8\x0c\x63\xc8\xdd\x75\x14\xf2\x1e\xc4\xc3\xa8\x83\x0c\x83\x76\xfe\x28\xa6\x29\x2c\x6e\xcb\x69\xcc\x65\x17\xce\x1d\x38\x37\x5b\x65\xb4\x87\xc0\x92\x51\x3b\x8f\x62\x98\x90\xdc\x21\x03\x43\xbe\xe5\x42\x1e\x26\x31\x74\xc6\x5b\xe9\xd2\xfc\x13\x16\x20\x93\x00\x19\xcc\x94\xca\xf1\x30\x9a\x6b\x2f\x0a\x0a\x7c\xbe\x39\xa7\x14\xa6\xa4\xe0\x79\x9d\x36\x4f\x40\xe6\xc1\x57\x4f\x9e\x57\x44\xd5\x68\x76\x35\xa9\xad\x1b\x96\x0c\x07\x6b\x92\xea\x1f\x3d\x7a\x17\xc6\x37\x10\xd1\x7b\x23\x1e\x46\x26\x7c\x03\x65\x22\x45\x69\x1c\x00\xde\x73\x46\x7d\x6e\x8c\x91\xb2\x5c\xcc\x1f\x32\x86\x31\x6f\xcb\x5c\x4d\x28\x6d\x41\xac\x3c\x8a\x4d\xe8\x20\x1f\x21\xc6\x60\x9f\xa8\x88\x15\xab\x46\xf6\xf6\xe0\xa2\xde\x7c\x77\x5d\x7f\xe7\x42\xfa\x63\xbf\xa6\xda\xec\xca\xbd\x70\x1b\x2d\x38\x80\x33\xef\xf2\xfd\xbc\x49\x6a\xff\x07\x00\x00\xff\xff\xba\x8c\xe9\x3b\xf8\x0c\x00\x00")

func bindataSqlTask1SqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSqlTask1Sql,
		"sql/task1.sql",
	)
}



func bindataSqlTask1Sql() (*asset, error) {
	bytes, err := bindataSqlTask1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "sql/task1.sql",
		size: 3320,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1671278055, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"sql/query1.sql": bindataSqlQuery1Sql,
	"sql/query2.sql": bindataSqlQuery2Sql,
	"sql/query3.sql": bindataSqlQuery3Sql,
	"sql/task1.sql":  bindataSqlTask1Sql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"sql": {Func: nil, Children: map[string]*bintree{
		"query1.sql": {Func: bindataSqlQuery1Sql, Children: map[string]*bintree{}},
		"query2.sql": {Func: bindataSqlQuery2Sql, Children: map[string]*bintree{}},
		"query3.sql": {Func: bindataSqlQuery3Sql, Children: map[string]*bintree{}},
		"task1.sql": {Func: bindataSqlTask1Sql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
